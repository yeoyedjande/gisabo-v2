version: '3.8'

services:
  # Application principale
  app:
    build: .
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DATABASE_URL=${DATABASE_URL}
      - SQUARE_ACCESS_TOKEN=${SQUARE_ACCESS_TOKEN}
      - SQUARE_APPLICATION_ID=${SQUARE_APPLICATION_ID}
      - SQUARE_LOCATION_ID=${SQUARE_LOCATION_ID}
      - SQUARE_ENVIRONMENT=${SQUARE_ENVIRONMENT}
      - VITE_SQUARE_APPLICATION_ID=${VITE_SQUARE_APPLICATION_ID}
      - VITE_SQUARE_LOCATION_ID=${VITE_SQUARE_LOCATION_ID}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - SESSION_SECRET=${SESSION_SECRET}
    depends_on:
      - postgres
    volumes:
      - uploads_data:/app/uploads
    restart: unless-stopped
    networks:
      - gisabo-network

  # Base de donn√©es PostgreSQL
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${PGDATABASE:-gisabo}
      - POSTGRES_USER=${PGUSER:-gisabo_user}
      - POSTGRES_PASSWORD=${PGPASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database_export.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./db-init:/docker-entrypoint-initdb.d/
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PGUSER:-gisabo_user} -d ${PGDATABASE:-gisabo}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - gisabo-network

  # Nginx comme reverse proxy (optionnel, pour la production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - gisabo-network

volumes:
  postgres_data:
  uploads_data:

networks:
  gisabo-network:
    driver: bridge