#!/usr/bin/env node

// Script de d√©marrage pour la production sur Digital Ocean App Platform
// Ce script g√®re l'initialisation et le d√©marrage de l'application

const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

// Configuration pour la production
process.env.NODE_ENV = 'production';

console.log('üöÄ [GISABO] D√©marrage en mode production...');
console.log(`üìä [INFO] Node.js version: ${process.version}`);
console.log(`üìä [INFO] Environment: ${process.env.NODE_ENV}`);

// V√©rification des variables d'environnement critiques
const requiredEnvVars = [
  'DATABASE_URL',
  'SQUARE_ACCESS_TOKEN', 
  'SQUARE_APPLICATION_ID',
  'SQUARE_LOCATION_ID',
  'CINETPAY_API_KEY',
  'CINETPAY_SITE_ID',
  'OPENAI_API_KEY',
  'SESSION_SECRET'
];

console.log('üîç [CHECK] V√©rification des variables d\'environnement...');
const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);

if (missingVars.length > 0) {
  console.warn(`‚ö†Ô∏è [WARN] Variables manquantes: ${missingVars.join(', ')}`);
  console.log('üí° [INFO] Certaines variables seront g√©n√©r√©es automatiquement par Digital Ocean');
} else {
  console.log('‚úÖ [CHECK] Toutes les variables critiques sont pr√©sentes');
}

// V√©rification de la configuration Square
if (process.env.SQUARE_ENVIRONMENT !== 'production') {
  console.warn('‚ö†Ô∏è [WARN] SQUARE_ENVIRONMENT n\'est pas d√©fini sur "production"');
}

// Fonction pour ex√©cuter les migrations de base de donn√©es
async function runDatabaseMigrations() {
  return new Promise((resolve, reject) => {
    console.log('üóÑÔ∏è [DB] Ex√©cution des migrations Drizzle...');
    
    const drizzleProcess = spawn('npm', ['run', 'db:push'], {
      stdio: 'inherit',
      env: process.env
    });
    
    drizzleProcess.on('close', (code) => {
      if (code === 0) {
        console.log('‚úÖ [DB] Migrations appliqu√©es avec succ√®s');
        resolve();
      } else {
        console.log('‚ö†Ô∏è [DB] Migrations √©chou√©es, tentative de continuit√©...');
        // Ne pas arr√™ter le processus en cas d'√©chec des migrations
        // Car la base pourrait d√©j√† √™tre initialis√©e
        resolve();
      }
    });
    
    drizzleProcess.on('error', (error) => {
      console.error('‚ùå [DB] Erreur lors des migrations:', error.message);
      resolve(); // Continuer malgr√© l'erreur
    });
    
    // Timeout de 60 secondes pour les migrations
    setTimeout(() => {
      drizzleProcess.kill('SIGTERM');
      console.log('‚è∞ [DB] Timeout des migrations, continuation...');
      resolve();
    }, 60000);
  });
}

// Fonction pour cr√©er les dossiers n√©cessaires
function createDirectories() {
  const dirs = ['uploads/products', 'uploads/services', 'uploads/temp'];
  
  dirs.forEach(dir => {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
      console.log(`üìÅ [SETUP] Dossier cr√©√©: ${dir}`);
    }
  });
  
  // V√©rifier que les assets statiques sont pr√©sents
  const staticDirs = ['attached_assets', 'client/public'];
  staticDirs.forEach(dir => {
    if (fs.existsSync(dir)) {
      console.log(`‚úÖ [ASSETS] Dossier trouv√©: ${dir}`);
    } else {
      console.warn(`‚ö†Ô∏è [ASSETS] Dossier manquant: ${dir}`);
    }
  });
}

// Fonction pour d√©marrer le serveur principal
function startServer() {
  console.log('üåê [SERVER] D√©marrage du serveur Express...');
  
  const serverProcess = spawn('npx', ['tsx', 'server/index.ts'], {
    stdio: 'inherit',
    env: process.env
  });
  
  serverProcess.on('close', (code) => {
    console.log(`üî¥ [SERVER] Processus termin√© avec le code: ${code}`);
    process.exit(code);
  });
  
  serverProcess.on('error', (error) => {
    console.error('‚ùå [SERVER] Erreur du serveur:', error.message);
    process.exit(1);
  });
  
  // Gestion des signaux pour un arr√™t propre
  process.on('SIGTERM', () => {
    console.log('üõë [SERVER] Signal SIGTERM re√ßu, arr√™t du serveur...');
    serverProcess.kill('SIGTERM');
  });
  
  process.on('SIGINT', () => {
    console.log('üõë [SERVER] Signal SIGINT re√ßu, arr√™t du serveur...');
    serverProcess.kill('SIGINT');
  });
}

// Fonction principale
async function main() {
  try {
    console.log('üèóÔ∏è [SETUP] Initialisation de l\'application...');
    
    // Cr√©er les dossiers n√©cessaires
    createDirectories();
    
    // Attendre un peu pour que la base de donn√©es soit pr√™te (Digital Ocean)
    console.log('‚è≥ [SETUP] Attente de la disponibilit√© de la base de donn√©es...');
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    // Ex√©cuter les migrations de base de donn√©es
    await runDatabaseMigrations();
    
    // D√©marrer le serveur
    startServer();
    
  } catch (error) {
    console.error('‚ùå [ERROR] Erreur lors de l\'initialisation:', error.message);
    process.exit(1);
  }
}

// Ex√©cution du script principal
main();